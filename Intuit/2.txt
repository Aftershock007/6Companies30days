Leetcode- 79

class Solution {
public:
    bool dfs(vector<vector<char>> &board, string word, int i, int j, int count){
        if (count == word.size())
            return true;
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != word[count])
            return false;

        char temp = board[i][j];
        board[i][j] = '#';

        bool left=dfs(board, word, i - 1, j, count + 1);
        bool right=dfs(board, word, i + 1, j, count + 1);
        bool top=dfs(board, word, i, j + 1, count + 1);
        bool down=dfs(board, word, i, j - 1, count + 1);
        
        bool found = left || right || top || down;
        board[i][j] = temp;
        return found;
    }
    bool exist(vector<vector<char>> &board, string word){
        int r = board.size(), c = board[0].size();
        for (int i = 0; i < r; i++){
            for (int j = 0; j < c; j++){
                if (word[0] == board[i][j] && dfs(board, word, i, j, 0))
                    return true;
            }
        }
        return false;
    }
};