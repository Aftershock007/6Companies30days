Leetcode- 417

class Solution {
public:
    vector<vector<int>> dir={{0,1},{0,-1},{1,0},{-1,0}};
    
    void dfs(vector<vector<int>>& heights,vector<vector<bool>>& ocean,int i,int j,int prevHeight){
        int r=heights.size(),c=heights[0].size();
        if(i<0||i>=r||j<0||j>=c||prevHeight>heights[i][j]||ocean[i][j]) return;
        ocean[i][j]=true;
        for(auto &ar:dir){
            dfs(heights,ocean,i+ar[0],j+ar[1],heights[i][j]);
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        vector<vector<int>> ans;
        int r=heights.size(),c=heights[0].size();
        vector<vector<bool>> atlantic(r,vector<bool>(c,0));
        vector<vector<bool>> pacific(r,vector<bool>(c,0));
        
        // DFS
        for(int i=0;i<r;i++){
            dfs(heights,pacific,i,0,INT_MIN);
            dfs(heights,atlantic,i,c-1,INT_MIN);
        }
        for(int i=0;i<c;i++){
            dfs(heights,pacific,0,i,INT_MIN);
            dfs(heights,atlantic,r-1,i,INT_MIN);
        }
        
        // Matching in both matrix
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(atlantic[i][j]&&pacific[i][j])
                    ans.push_back({i,j});
            }
        }
        return ans;
    }
};